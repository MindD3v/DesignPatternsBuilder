<?xml version="1.0" encoding="utf-8" ?>
<DesignPattern name="Singleton Canonical" type="Singleton">
  <Description>
    <![CDATA[
      The singleton pattern is a design pattern that restricts the Instantiation of a class to one object. If the client use the instance of the singleton, the singleton will return the same instance, every time.
      The canonical form doesn't care about multithreaded environments or when the class is initialized.
    ]]>
  </Description>
  <Parameters>
    <Parameter name="{NAMESPACE}" description="Namespace" />
    <Parameter name="{CLASS_NAME}" description="Class Name" />
  </Parameters>
  <Pattern>
    <File>
      <Name>
        <![CDATA[
        {CLASS_NAME}
        ]]>
      </Name>
      <Extension>
        .cs
      </Extension>
      <Implementation>
    <![CDATA[
namespace {NAMESPACE}
{
  public class {CLASS_NAME}
  {
      private static {CLASS_NAME} _instance;

      private {CLASS_NAME}() {}

      public static {CLASS_NAME} Instance
      {
          get 
          {
              if (_instance == null)
              {
                  _instance = new {CLASS_NAME}();
              }
              return _instance;
          }
      }
  }
}
  ]]>
      </Implementation>
    </File>
  </Pattern>
</DesignPattern>