<?xml version="1.0" encoding="utf-8" ?>
<DesignPattern name="Singleton Lazy" type="Singleton">
  <Description>
    <![CDATA[
      The singleton pattern is a design pattern that restricts the Instantiation of a class to one object. If the client use the instance of the singleton, the singleton will return the same instance, every time.
      The lazy form uses the generic Lazy<T> to instantiate the singleton until the singleton is called.
    ]]>
  </Description>
  <Parameters>
    <Parameter name="{NAMESPACE}" description="Namespace" />
    <Parameter name="{CLASS_NAME}" description="Class Name" />
  </Parameters>
  <Pattern>
    <File>
      <Name>
        <![CDATA[
        {CLASS_NAME}
        ]]>
      </Name>
      <Extension>
        .cs
      </Extension>
      <Implementation>
    <![CDATA[
using System;

namespace {NAMESPACE}
{
    public class {CLASS_NAME}
    {
   
        private static readonly Lazy<{CLASS_NAME}> _instance
            = new Lazy<{CLASS_NAME}>(() => new {CLASS_NAME}());
   
       private {CLASS_NAME}()
       {
       }
    
  
       public static {CLASS_NAME} Instance
       {
           get
           {
               return _instance.Value;
           }
       }
  }
}
  ]]>
      </Implementation>
    </File>
  </Pattern>
</DesignPattern>