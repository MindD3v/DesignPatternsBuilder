<?xml version="1.0" encoding="utf-8" ?>
<DesignPattern name="Singleton Static Initialization" type="Singleton">
  <Description>
    <![CDATA[
      The singleton pattern is a design pattern that restricts the Instantiation of a class to one object. If the client use the instance of the singleton, the singleton will return the same instance, every time.
      The static initialization form uses the static object initializer, delegating the responsibility to the CLR to initialize the object. This form is a kind of lazy initialization.
    ]]>
  </Description>
  <Parameters>
    <Parameter name="{NAMESPACE}" description="Namespace" />
    <Parameter name="{CLASS_NAME}" description="Class Name" />
  </Parameters>
  <Pattern>
    <File>
      <Name>
        <![CDATA[
        {CLASS_NAME}
        ]]>
      </Name>
      <Extension>
        .cs
      </Extension>
      <Implementation>
<![CDATA[
namespace {NAMESPACE}
{
  public sealed class {CLASS_NAME}
  {
    private static readonly {CLASS_NAME} _instance = new {CLASS_NAME}();

    private {CLASS_NAME}(){}

    public static {CLASS_NAME} Instance
    {
      get
      {
        return _instance;
      }
    }
  }
}
  ]]>
      </Implementation>
    </File>
  </Pattern>
</DesignPattern>